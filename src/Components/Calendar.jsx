import React, { useState, useEffect } from "react";
import Calendar from "react-calendar";
import "./Calendar.css";
import moment from "moment";
import axios from "axios";

// reactcalendarÍ∞Ä Îã¨Ïù¥ Î∞îÎÄî ÎïåÎßàÎã§ daylistÏóÖÎç∞Ïù¥Ìä∏ 
// Ï¥àÍ∏∞ ÏÉÅÌÉú
// activeMonth = "2025-01-01"
// ÏÇ¨Ïö©ÏûêÍ∞Ä Îã§Ïùå Îã¨ Î≤ÑÌäº ÌÅ¥Î¶≠ (1Ïõî -> 2Ïõî)
// onActiveStartDateChange Î∞úÏÉù -> getActiveMonth(activeStartDate) Ìò∏Ï∂ú
// activeStartDate = 2025-02-01
// moment(activeStartDate).format('YYYY-MM-DD') -> "2025-02-01"
// ÏÉàÎ°úÏö¥ activeMonth Ï†ÄÏû•
// Í∏∞Ï°¥ activeMonth = "2025-01-01"
// ÏÉàÎ°úÏö¥ activeMonth = "2025-02-01"Ïù¥ÎØÄÎ°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
// setActiveMonth("2025-02-01")
// API Ìò∏Ï∂ú
// useEffect Ïã§Ìñâ -> fetchReservedDates() Ìò∏Ï∂ú
// "2025-02-01" ÏòàÏïΩÎêú ÎÇ†Ïßú API ÏöîÏ≤≠
// UI ÏóÖÎç∞Ïù¥Ìä∏Îê®


//handleDateSelect api ownerÎûë Ïó∞Í≤∞

const ReactCalendar = () => {
    const [selectedDate, setSelectedDate] = useState(new Date()); //ÏÑ†ÌÉùÌïú ÎÇ†Ïßú (ÌïòÎã®Ïóê ÏòàÏïΩ ÎÇ¥Ïó≠ÏùÑ ÌëúÏãúÌï† Îïå ÏÇ¨Ïö©)
    const [reservations, setReservations] = useState([]); //ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÏùò ÏòàÏïΩ ÎÇ¥Ïó≠
    const [activeMonth, setActiveMonth] = useState(moment().format('YYYY-MM-DD')); //ÌòÑÏû¨ Î≥¥Ïù¥Îäî Îã¨ Ï†ÄÏû•
    const [dayList, setDayList] = useState([]); //Ìï¥Îãπ Îã¨Ïùò ÏòàÏïΩÎêú ÎÇ†Ïßú Î¶¨Ïä§Ìä∏

    const getActiveMonth = (activeStartDate) => {
        const newActiveMonth = moment(activeStartDate).format('YYYY-MM-DD');
        if (newActiveMonth !== activeMonth) { 
            setActiveMonth(newActiveMonth);
        }
    }; //Î∞õÏïÑÏò® Ïù∏Ïûê(activeStartDate)Ïóê Îî∞Îùº ÌòÑÏû¨ Î≥¥Ïó¨ÏßÄÎäî Îã¨(activeMonth)Ïùò StateÎ•º Î≥ÄÍ≤ΩÌïòÎäî Ìï®Ïàò

    useEffect(() => {
        const fetchReservedDates = async () => {
            try {
                console.log(`üìå API ÏöîÏ≤≠: ${activeMonth}`); // ‚úÖ ÌòÑÏû¨ activeMonthÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Î°úÍ∑∏ ÌôïÏù∏
                const response = await axios.get(
                    `http://43.200.3.214:8080/api/reservation/owner/date?date=${activeMonth}`, {
                        
                        headers: {
                            Authorization: `eyJ0eXBlIjoiYWNjZXNzVG9rZW4iLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjIsInVzZXJUeXBlIjoiT1dORVIiLCJ1c2VyTmFtZSI6Ik93bmVyVGVzdCIsImlhdCI6MTczOTgwMjM5OSwiZXhwIjoxNzM5ODg4Nzk5fQ.sqCnEznfuCYF7IQWisPSbBT7kRAzKvlsri43zSrzF8Q`
                        }
                });

                console.log("API ÏùëÎãµ: ", response.data);
                
                if (!response.data.isSuccess) {
                    console.error("API Ïò§Î•ò: ", response.data);
                    return;
                }

                // ÏòàÏïΩÎêú ÎÇ†Ïßú Î¶¨Ïä§Ìä∏ Ï∂îÏ∂ú
                const reservedDates = response.data.result?.reservationDateList?.map(item => item) || [];
                setDayList(reservedDates);
                console.log("üìå ÏóÖÎç∞Ïù¥Ìä∏Îêú Ìï¥Îãπ Îã¨ ÏòàÏïΩÎêú ÎÇ†Ïßú:", JSON.stringify(reservedDates, null, 1));

            } catch (error) {
                console.error("ÏòàÏïΩÎÇ¥Ïó≠ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®", error)
            }
        };

        
        fetchReservedDates();
    }, [activeMonth]); //activeMonthÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ïã§Ìñâ

    //ÌïòÎã®Ïóê ÏòàÏïΩ ÎÇ¥Ïó≠ÏùÑ ÌëúÏãúÌï† Îïå ÏÇ¨Ïö©
    const handleDateSelect = async (date) => {
        const activeDate = moment(date).format("YYYY-MM-DD");
        setSelectedDate(date);
        console.log("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: ", activeDate);

        try {
            const response = await axios.get(
                `http://43.200.3.214:8080/api/reservation/owner?date=${activeDate}&page=1`,
               {
                    headers: {
                        Authorization: `eyJ0eXBlIjoiYWNjZXNzVG9rZW4iLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOjIsInVzZXJUeXBlIjoiT1dORVIiLCJ1c2VyTmFtZSI6Ik93bmVyVGVzdCIsImlhdCI6MTczOTgwMjM5OSwiZXhwIjoxNzM5ODg4Nzk5fQ.sqCnEznfuCYF7IQWisPSbBT7kRAzKvlsri43zSrzF8Q`
                    }
                }
            );

            console.log("API ÏùëÎãµ: ", response);
            
             if (!response.data.isSuccess) {
                 console.error("API Ïò§Î•ò: ", response.data.result);
            }
    
            setReservations(response.data.result);
            console.log("RESÎç∞Ïù¥ÌÑ∞: " + reservations);
            console.log("RES Îç∞Ïù¥ÌÑ∞:", JSON.stringify(reservations, null, 1)); //(Í∞ùÏ≤¥Ïù¥Î¶Ñ, ÏÜçÏÑ±, Ï§ÑÍ∞ÑÍ≤©)

        } catch (error) {
            console.error("ÏòàÏïΩ ÎÇ¥Ïó≠ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®! : ", error);
        }
    };

    return (
        <div>
            <CalendarComponent 
            showDate={true} 
            onDateSelect={handleDateSelect} 
            reservations={reservations}
            value={selectedDate}
            dayList={dayList} // APIÏóêÏÑú Í∞ÄÏ†∏Ïò® ÎÇ†Ïßú Î¶¨Ïä§Ìä∏ Ï†ÑÎã¨
            onActiveStartDateChange={({ activeStartDate }) =>
                getActiveMonth(activeStartDate)}
            />
        </div>
    );
};

const CalendarComponent = ({ showDate, onDateSelect, value, dayList, onActiveStartDateChange }) => {

    const tileClassName = ({ date, view }) => {
        // viewÍ∞Ä "month"Ïùº ÎïåÎßå Ï†ÅÏö©
        if (view === "month") {
            // ÎÇ†ÏßúÍ∞Ä ÏùºÏöîÏùº(0) ÎòêÎäî ÌÜ†ÏöîÏùº(6)Ïùº Í≤ΩÏö∞ Îπ®Í∞ÑÏÉâ
            if (date.getDay() === 0 || date.getDay() === 6) {
                return "red-day"; // "red-day" ÌÅ¥ÎûòÏä§Î•º Î∞òÌôò
            }
        }
        return "";
    };

    const blueDot = ({date, view}) => {
        if (view === "month") {

            const formattedDate = moment(date).format("YYYY-MM-DD");
            console.log("dayList : " + dayList);
            if (dayList.includes(formattedDate)) {
                return <div className="blue-dot" />;
            }
        }
        return null;
    }

    return (
        <Calendar
            onChange={onDateSelect}
            value={value}
            calendarType="gregory"
            view="month"
            prev2Label={null}
            next2Label={null}
            showNeighboringMonth={false}
            formatDay={(locale, date) => moment(date).format("D")}
            formatMonthYear={(locale, date) => moment(date).format("YYYY. MM")}
            prevLabel={
                <img
                    src="../../assets/img/prev-button.png"
                    alt="prev"
                    className="calendar-prevnav-btn"
                />
            }
            nextLabel={
                <img
                    src="../../assets/img/next-button.png"
                    alt="next"
                    className="calendar-nextnav-btn"
                />
            }
            tileClassName={tileClassName}
            tileContent={({ date, view }) => blueDot({ date, view })}
            onActiveStartDateChange={onActiveStartDateChange}
        />
    );
};

export default ReactCalendar;
export { CalendarComponent };